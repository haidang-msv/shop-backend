import { BadRequestException, Body, Controller, Get, Post, Request, UseGuards } from '@nestjs/common';
import { AuthService } from '@modules/auth/auth.service';
import { LocalAuthGuard } from '@modules/auth/guards/local-auth.guard';
import { JwtAuthGuard } from '@modules/auth/guards/jwt-auth.guard';
import { Public } from '@modules/auth/decorators/public.decorator';
import { CreateUserDto } from '@modules/users/dto/create-user.dto';
import { clog } from '@helpers/utilities';

@Controller('auth')
export class AuthController {

  constructor(
    private readonly authService: AuthService,
  ) { }

  @Post('register')
  @Public()
  async register(@Body() userDto: CreateUserDto): Promise<any> {
    const ouput = await this.authService.registerUser(userDto);
    if (ouput === null) throw new BadRequestException('This email/username is exists');
    return ouput;
  }

  @Post('login')
  @Public()
  @UseGuards(LocalAuthGuard)
  async login(@Request() req): Promise<any> {
    clog('üóùÔ∏è >> after go to local.strategy.ts');
    /*
    ƒë·∫ßu ti√™n, nest s·∫Ω ch·∫°y v√†o local.strategy.ts,
    t√¨m v√† th·ª±c thi method validate, ƒë·ªÉ th·ª±c hi·ªán ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p.
    n·∫øu th√¥ng tin ƒëƒÉng nh·∫≠p ko h·ª£p l·ªá, s·∫Ω return l·ªói ho·∫∑c exception.
    ng∆∞·ª£c l·∫°i, s·∫Ω g·ªçi ti·∫øp method handleLogin c·ªßa AuthService, v√† ti·∫øn h√†nh c·∫•p access token th√¥ng qua jwt
    */
    return this.authService.handleLogin(req.user);
  }
  
  @Get('profile')
  @UseGuards(JwtAuthGuard)
  getProfile(@Request() req) {
    clog('üóùÔ∏è after go to jwt.strategy.ts');
    /*
    ƒë·∫ßu ti√™n, nest s·∫Ω ch·∫°y v√†o jwt.strategy.ts,
    t√¨m v√† th·ª±c thi method validate, ƒë·ªÉ th·ª±c hi·ªán verify token b·∫±ng c√°ch:
    tr√≠ch xu·∫•t BearerToken t·ª´ header c·ªßa request,
    r·ªìi gi·∫£i m√£ v√† so s√°nh v·ªõi secret key ƒë√£ l∆∞u tr∆∞·ªõc ƒë√≥.
    n·∫øu token h·ª£p l·ªá, s·∫Ω gi·∫£i m√£ payload v√† tr·∫£ v·ªÅ d·ªØ li·ªáu.
    ng∆∞·ª£c l·∫°i, s·∫Ω tr·∫£ v·ªÅ exception Unauthorized 401
    */
    return this.authService.fetchProfile(req.user.email);
  }
}
